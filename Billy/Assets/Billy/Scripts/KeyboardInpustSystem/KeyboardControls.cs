//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Billy/Scripts/KeyboardInpustSystem/KeyboardControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardControls"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""d2cebbe9-8545-4915-8114-237f6728b955"",
            ""actions"": [
                {
                    ""name"": ""StanceDef"",
                    ""type"": ""Button"",
                    ""id"": ""5e20eff7-272c-4daa-abfc-60e327c8aa1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StanceNeut"",
                    ""type"": ""Button"",
                    ""id"": ""0d99959d-aa2d-4f52-87b6-00b26d50a64f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StanceAtk"",
                    ""type"": ""Button"",
                    ""id"": ""44d48c00-2ff0-412e-8564-089e001131e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PoseSpock"",
                    ""type"": ""Button"",
                    ""id"": ""cda06d27-d2cc-4a04-a928-19bfa7215e31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PosePace"",
                    ""type"": ""Button"",
                    ""id"": ""6b6e691f-8664-4766-91d6-06f2689fe98f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PoseMarcello"",
                    ""type"": ""Button"",
                    ""id"": ""9dd6ffdb-447a-491a-a99e-ac4f3fac384b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PosePistola"",
                    ""type"": ""Button"",
                    ""id"": ""f15675f7-5553-4cb6-a43e-62b5652638c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PoseOk"",
                    ""type"": ""Button"",
                    ""id"": ""a7caf934-74ae-4562-84d7-e1f4ccfc1eab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e9238e8-e569-44f8-b651-264badabb769"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StanceDef"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd3c8eca-1e66-420a-97c4-7194464a864b"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StanceNeut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b5794b3-90df-4cfc-bb2f-5d7a1d128b78"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StanceAtk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f8135f7-e013-43cd-a3a5-46583db80859"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PoseSpock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e59747b-7c4a-4f5f-abdc-78ec2f7587d8"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PosePace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ce7726-5cd4-41c3-9b82-3be45c0d5830"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PoseMarcello"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29198c39-4588-45e4-bb70-2feb4d2726fb"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PosePistola"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""984e7415-b4a5-4e7b-b797-2c135485f257"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PoseOk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_StanceDef = m_Keyboard.FindAction("StanceDef", throwIfNotFound: true);
        m_Keyboard_StanceNeut = m_Keyboard.FindAction("StanceNeut", throwIfNotFound: true);
        m_Keyboard_StanceAtk = m_Keyboard.FindAction("StanceAtk", throwIfNotFound: true);
        m_Keyboard_PoseSpock = m_Keyboard.FindAction("PoseSpock", throwIfNotFound: true);
        m_Keyboard_PosePace = m_Keyboard.FindAction("PosePace", throwIfNotFound: true);
        m_Keyboard_PoseMarcello = m_Keyboard.FindAction("PoseMarcello", throwIfNotFound: true);
        m_Keyboard_PosePistola = m_Keyboard.FindAction("PosePistola", throwIfNotFound: true);
        m_Keyboard_PoseOk = m_Keyboard.FindAction("PoseOk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_StanceDef;
    private readonly InputAction m_Keyboard_StanceNeut;
    private readonly InputAction m_Keyboard_StanceAtk;
    private readonly InputAction m_Keyboard_PoseSpock;
    private readonly InputAction m_Keyboard_PosePace;
    private readonly InputAction m_Keyboard_PoseMarcello;
    private readonly InputAction m_Keyboard_PosePistola;
    private readonly InputAction m_Keyboard_PoseOk;
    public struct KeyboardActions
    {
        private @KeyboardControls m_Wrapper;
        public KeyboardActions(@KeyboardControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StanceDef => m_Wrapper.m_Keyboard_StanceDef;
        public InputAction @StanceNeut => m_Wrapper.m_Keyboard_StanceNeut;
        public InputAction @StanceAtk => m_Wrapper.m_Keyboard_StanceAtk;
        public InputAction @PoseSpock => m_Wrapper.m_Keyboard_PoseSpock;
        public InputAction @PosePace => m_Wrapper.m_Keyboard_PosePace;
        public InputAction @PoseMarcello => m_Wrapper.m_Keyboard_PoseMarcello;
        public InputAction @PosePistola => m_Wrapper.m_Keyboard_PosePistola;
        public InputAction @PoseOk => m_Wrapper.m_Keyboard_PoseOk;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @StanceDef.started += instance.OnStanceDef;
            @StanceDef.performed += instance.OnStanceDef;
            @StanceDef.canceled += instance.OnStanceDef;
            @StanceNeut.started += instance.OnStanceNeut;
            @StanceNeut.performed += instance.OnStanceNeut;
            @StanceNeut.canceled += instance.OnStanceNeut;
            @StanceAtk.started += instance.OnStanceAtk;
            @StanceAtk.performed += instance.OnStanceAtk;
            @StanceAtk.canceled += instance.OnStanceAtk;
            @PoseSpock.started += instance.OnPoseSpock;
            @PoseSpock.performed += instance.OnPoseSpock;
            @PoseSpock.canceled += instance.OnPoseSpock;
            @PosePace.started += instance.OnPosePace;
            @PosePace.performed += instance.OnPosePace;
            @PosePace.canceled += instance.OnPosePace;
            @PoseMarcello.started += instance.OnPoseMarcello;
            @PoseMarcello.performed += instance.OnPoseMarcello;
            @PoseMarcello.canceled += instance.OnPoseMarcello;
            @PosePistola.started += instance.OnPosePistola;
            @PosePistola.performed += instance.OnPosePistola;
            @PosePistola.canceled += instance.OnPosePistola;
            @PoseOk.started += instance.OnPoseOk;
            @PoseOk.performed += instance.OnPoseOk;
            @PoseOk.canceled += instance.OnPoseOk;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @StanceDef.started -= instance.OnStanceDef;
            @StanceDef.performed -= instance.OnStanceDef;
            @StanceDef.canceled -= instance.OnStanceDef;
            @StanceNeut.started -= instance.OnStanceNeut;
            @StanceNeut.performed -= instance.OnStanceNeut;
            @StanceNeut.canceled -= instance.OnStanceNeut;
            @StanceAtk.started -= instance.OnStanceAtk;
            @StanceAtk.performed -= instance.OnStanceAtk;
            @StanceAtk.canceled -= instance.OnStanceAtk;
            @PoseSpock.started -= instance.OnPoseSpock;
            @PoseSpock.performed -= instance.OnPoseSpock;
            @PoseSpock.canceled -= instance.OnPoseSpock;
            @PosePace.started -= instance.OnPosePace;
            @PosePace.performed -= instance.OnPosePace;
            @PosePace.canceled -= instance.OnPosePace;
            @PoseMarcello.started -= instance.OnPoseMarcello;
            @PoseMarcello.performed -= instance.OnPoseMarcello;
            @PoseMarcello.canceled -= instance.OnPoseMarcello;
            @PosePistola.started -= instance.OnPosePistola;
            @PosePistola.performed -= instance.OnPosePistola;
            @PosePistola.canceled -= instance.OnPosePistola;
            @PoseOk.started -= instance.OnPoseOk;
            @PoseOk.performed -= instance.OnPoseOk;
            @PoseOk.canceled -= instance.OnPoseOk;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnStanceDef(InputAction.CallbackContext context);
        void OnStanceNeut(InputAction.CallbackContext context);
        void OnStanceAtk(InputAction.CallbackContext context);
        void OnPoseSpock(InputAction.CallbackContext context);
        void OnPosePace(InputAction.CallbackContext context);
        void OnPoseMarcello(InputAction.CallbackContext context);
        void OnPosePistola(InputAction.CallbackContext context);
        void OnPoseOk(InputAction.CallbackContext context);
    }
}
